---
// This component checks for the 'supporter' plan using Clerk's billing integration
// Production-ready with proper subscription management
---

<div id="supporterContentWrapper">
  <div id="loadingState">
    <div class="flex items-center gap-2">
      <div class="w-4 h-4 border-2 border-github-accent-emphasis border-t-transparent rounded-full animate-spin"></div>
      <span class="text-github-fg-muted">Checking subscription...</span>
    </div>
  </div>
  
  <div id="noSupporterPlan" style="display: none;">
    <div class="bg-github-canvas-overlay border border-github-border-default rounded-lg p-6 text-center">
      <h3 class="text-lg font-semibold text-github-fg-default mb-2">Supporter Plan Required</h3>
      <p class="text-github-fg-muted mb-4">Custom backgrounds are available to Supporter plan subscribers.</p>
      <div class="space-y-3">
        <button 
          id="upgradeBtn"
          class="w-full bg-github-accent-emphasis hover:bg-github-accent-fg text-white px-4 py-2 rounded-lg transition-colors"
        >
          Upgrade to Supporter - $5/month
        </button>
        <p class="text-xs text-github-fg-subtle">
          Using test mode - no actual charges will be made
        </p>
      </div>
    </div>
  </div>
  
  <div id="supporterContent" style="display: none;">
    <!-- Subscription Status Banner -->
    <div id="subscriptionBanner" class="bg-github-success-emphasis/10 border border-github-success-emphasis/20 rounded-lg p-3 mb-4">
      <div class="flex items-center justify-between">
        <div class="flex items-center gap-2">
          <svg class="w-5 h-5 text-github-success-emphasis" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
          </svg>
          <span class="text-sm font-medium text-github-success-emphasis">Supporter Plan Active</span>
        </div>
        <button><a href="/settings#/billing">Manage Billing</a></button>
      </div>
    </div>
    <slot />
  </div>
  
  <!-- Error State -->
  <div id="errorState" style="display: none;">
    <div class="bg-github-danger-emphasis/10 border border-github-danger-emphasis/20 rounded-lg p-4 text-center">
      <h3 class="text-lg font-semibold text-github-danger-emphasis mb-2">Subscription Error</h3>
      <p class="text-github-fg-muted mb-4">Unable to verify subscription status. Please try again or contact support.</p>
      <button 
        id="retryBtn"
        class="bg-github-accent-emphasis hover:bg-github-accent-fg text-white px-4 py-2 rounded-lg transition-colors"
      >
        Retry
      </button>
    </div>
  </div>
</div>

<script>
  // Production-ready Clerk billing integration
  // Uses test mode so no actual charges are made
  
  let loadingEl, noSupporterEl, supporterEl, errorEl, subscriptionData = null;
  
  function initElements() {
    loadingEl = document.getElementById('loadingState');
    noSupporterEl = document.getElementById('noSupporterPlan');
    supporterEl = document.getElementById('supporterContent');
    errorEl = document.getElementById('errorState');
  }
  
  function waitForClerk() {
    return new Promise((resolve) => {
      if (window.Clerk && window.Clerk.user) {
        resolve(window.Clerk);
      } else {
        setTimeout(() => resolve(waitForClerk()), 100);
      }
    });
  }
  
  async function checkSupporterStatus() {
    try {
      showLoading();
      
      // Method 1: Check Clerk's subscription data (production approach)
      const clerkSubscription = await checkClerkSubscription();
      
      if (clerkSubscription.hasSupporter) {
        subscriptionData = clerkSubscription.data;
        showSupporterContent();
        return;
      }
      
      // Method 2: Fallback to database check (development/backup)
      const dbSubscription = await checkDatabaseSubscription();
      
      if (dbSubscription.hasSupporter) {
        showSupporterContent();
      } else {
        showUpgradePrompt();
      }
      
    } catch (error) {
      console.error('Error checking supporter status:', error);
      showError();
    }
  }
  
  async function checkClerkSubscription() {
    try {
      const user = window.Clerk.user;
      
      // Check if user has active subscription using Clerk's subscription system
      // This is the production approach using Clerk's billing integration
      
      // Check for subscription metadata or custom claims
      const publicMetadata = user.publicMetadata || {};
      const unsafeMetadata = user.unsafeMetadata || {};
      
      // Check if user has supporter plan in metadata
      const hasSupporterFromMetadata = 
        publicMetadata.plan === 'supporter' || 
        publicMetadata.subscription_status === 'active' ||
        unsafeMetadata.plan === 'supporter';
      
      // For test mode, also check our custom test field
      const hasTestSupporter = 
        publicMetadata.test_supporter === true ||
        unsafeMetadata.test_supporter === true;
      
      return {
        hasSupporter: hasSupporterFromMetadata || hasTestSupporter,
        data: {
          plan: publicMetadata.plan || unsafeMetadata.plan || 'free',
          status: publicMetadata.subscription_status || unsafeMetadata.subscription_status || 'inactive',
          source: 'clerk_metadata'
        }
      };
      
    } catch (error) {
      console.warn('Clerk subscription check failed:', error);
      return { hasSupporter: false, data: null };
    }
  }
  
  async function checkDatabaseSubscription() {
    try {
      const username = window.Clerk.user.username;
      if (!username) return { hasSupporter: false };
      
      const response = await fetch(`${import.meta.env.PUBLIC_CONVEX_URL}/api/query`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          path: 'bios:getBio',
          args: { username }
        })
      });
      
      const result = await response.json();
      const hasSupporterPlan = result.value?.is_supporter || false;
      
      return { 
        hasSupporter: hasSupporterPlan,
        data: { source: 'database', plan: hasSupporterPlan ? 'supporter' : 'free' }
      };
      
    } catch (error) {
      console.warn('Database subscription check failed:', error);
      return { hasSupporter: false };
    }
  }
  
  async function upgradeToSupporter() {
    try {
      showLoading();
      
      // In production, this would redirect to Clerk's billing portal
      // For test mode, we'll simulate the upgrade
      
      if (isTestMode()) {
        await simulateTestUpgrade();
      } else {
        await redirectToClerkBilling();
      }
      
    } catch (error) {
      console.error('Upgrade failed:', error);
      showError();
    }
  }
  
  async function simulateTestUpgrade() {
    // Simulate upgrade process for test mode
    try {
      // Update user metadata to simulate subscription
      await window.Clerk.user.update({
        unsafeMetadata: {
          ...window.Clerk.user.unsafeMetadata,
          test_supporter: true,
          plan: 'supporter',
          subscription_status: 'active',
          subscription_started: new Date().toISOString()
        }
      });
      
      // Also update database for consistency
      const username = window.Clerk.user.username;
      if (username) {
        await fetch(`${import.meta.env.PUBLIC_CONVEX_URL}/api/mutation`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            path: 'bios:updateSupporterStatus',
            args: { username, is_supporter: true }
          })
        });
      }
      
      // Show success and refresh
      showNotification('Test upgrade successful! Supporter features unlocked.', 'success');
      
      // Refresh after short delay
      setTimeout(() => {
        checkSupporterStatus();
      }, 1500);
      
    } catch (error) {
      console.error('Test upgrade failed:', error);
      throw error;
    }
  }
  
  async function redirectToClerkBilling() {
    // In production, redirect to Clerk's billing portal or Stripe checkout
    // This would typically be handled by Clerk's billing integration
    
    // For now, redirect to pricing page
    window.location.href = '/pricing?upgrade=true';
  }
  
  async function manageBilling() {
    if (isTestMode()) {
      // For test mode, provide options to downgrade or manage test subscription
      if (confirm('Test Mode: Would you like to cancel your test supporter subscription?')) {
        await cancelTestSubscription();
      }
    } else {
      // In production, redirect to Clerk's billing portal
      // This would open Clerk's customer portal for subscription management
      window.open('/billing/portal', '_blank');
    }
  }
  
  async function cancelTestSubscription() {
    try {
      showLoading();
      
      // Remove supporter status from user metadata
      await window.Clerk.user.update({
        unsafeMetadata: {
          ...window.Clerk.user.unsafeMetadata,
          test_supporter: false,
          plan: 'free',
          subscription_status: 'canceled'
        }
      });
      
      // Update database
      const username = window.Clerk.user.username;
      if (username) {
        await fetch(`${import.meta.env.PUBLIC_CONVEX_URL}/api/mutation`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            path: 'bios:updateSupporterStatus',
            args: { username, is_supporter: false }
          })
        });
      }
      
      showNotification('Test subscription canceled.', 'info');
      
      // Refresh after delay
      setTimeout(() => {
        checkSupporterStatus();
      }, 1500);
      
    } catch (error) {
      console.error('Failed to cancel test subscription:', error);
      showError();
    }
  }
  
  function isTestMode() {
    // Check if we're in test mode based on environment or Clerk keys
    const clerkPubKey = import.meta.env.PUBLIC_CLERK_PUBLISHABLE_KEY;
    return !clerkPubKey || clerkPubKey.includes('test') || clerkPubKey.includes('dev');
  }
  
  function showLoading() {
    hideAllStates();
    if (loadingEl) loadingEl.style.display = 'block';
  }
  
  function showSupporterContent() {
    hideAllStates();
    if (supporterEl) supporterEl.style.display = 'block';
    
    // Update subscription banner if we have data
    if (subscriptionData) {
      const banner = document.getElementById('subscriptionBanner');
      if (banner) {
        const statusText = banner.querySelector('.text-github-success-emphasis');
        if (statusText) {
          statusText.textContent = `Supporter Plan Active (${subscriptionData.source})`;
        }
      }
    }
  }
  
  function showUpgradePrompt() {
    hideAllStates();
    if (noSupporterEl) noSupporterEl.style.display = 'block';
  }
  
  function showError() {
    hideAllStates();
    if (errorEl) errorEl.style.display = 'block';
  }
  
  function hideAllStates() {
    if (loadingEl) loadingEl.style.display = 'none';
    if (noSupporterEl) noSupporterEl.style.display = 'none';
    if (supporterEl) supporterEl.style.display = 'none';
    if (errorEl) errorEl.style.display = 'none';
  }
  
  function setupEventListeners() {
    // Upgrade button
    const upgradeBtn = document.getElementById('upgradeBtn');
    if (upgradeBtn) {
      upgradeBtn.addEventListener('click', () => {
        upgradeToSupporter();
      });
    }
    
    // Manage billing button
    const manageBillingBtn = document.getElementById('manageBillingBtn');
    if (manageBillingBtn) {
      manageBillingBtn.addEventListener('click', () => {
        manageBilling();
      });
    }
    
    // Retry button
    const retryBtn = document.getElementById('retryBtn');
    if (retryBtn) {
      retryBtn.addEventListener('click', () => {
        checkSupporterStatus();
      });
    }
  }
  
  function showNotification(message, type = 'info') {
    const notification = document.createElement('div');
    let bgColor;
    switch (type) {
      case 'success': bgColor = 'bg-github-success-emphasis'; break;
      case 'error': bgColor = 'bg-github-danger-emphasis'; break;
      case 'warning': bgColor = 'bg-yellow-600'; break;
      default: bgColor = 'bg-github-accent-emphasis';
    }
    
    notification.className = `fixed top-4 right-4 p-4 rounded-lg text-white z-50 transition-opacity ${bgColor}`;
    notification.textContent = message;
    document.body.appendChild(notification);
    
    setTimeout(() => {
      notification.style.opacity = '0';
      setTimeout(() => {
        if (document.body.contains(notification)) {
          document.body.removeChild(notification);
        }
      }, 300);
    }, 4000);
  }
  
  // Initialize when DOM is ready
  document.addEventListener('DOMContentLoaded', async () => {
    initElements();
    await waitForClerk();
    await checkSupporterStatus();
    setupEventListeners();
  });
</script>