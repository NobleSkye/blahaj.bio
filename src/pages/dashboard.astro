---
import SiteLayout from '../layouts/SiteLayout.astro';
import { Protect } from "@clerk/astro/components";
import SupporterContent from '../components/supporter-content.astro';
---

<SiteLayout title="Dashboard - Blähaj.bio">
  <Protect>
    <div class="py-16 bg-github-canvas-default min-h-screen">
      <div class="max-w-4xl mx-auto px-4">
        
        <!-- Dashboard Header -->
        <div class="text-center mb-12">
          <h1 class="text-4xl font-bold text-gray-900 dark:text-github-fg-default mb-4">
            Bio Dashboard
          </h1>
          <p class="text-xl text-gray-600 dark:text-github-fg-muted">
            Manage your personal bio page
          </p>
        </div>

        <!-- Main Dashboard Content -->
        <div class="grid lg:grid-cols-3 gap-8">
          
          <!-- Bio Form -->
          <div class="lg:col-span-2">
            <div class="bg-white dark:bg-github-canvas-overlay rounded-2xl shadow-xl p-8 border border-gray-200 dark:border-github-border-default">
              <h2 class="text-2xl font-bold text-gray-900 dark:text-github-fg-default mb-6">Edit Your Bio</h2>
              
              <form id="bioForm" class="space-y-6">
                <!-- Display Name -->
                <div>
                  <label for="display_name" class="block text-sm font-medium text-gray-700 dark:text-github-fg-default mb-2">
                    Display Name
                  </label>
                  <input
                    type="text"
                    id="display_name"
                    name="display_name"
                    required
                    class="w-full px-4 py-3 rounded-lg border border-gray-300 dark:border-github-border-default bg-white dark:bg-github-canvas-default text-gray-900 dark:text-github-fg-default focus:ring-2 focus:ring-github-accent-emphasis focus:border-transparent"
                    placeholder="Your display name"
                  />
                </div>

                <!-- Pronouns -->
                <div>
                  <label for="pronouns" class="block text-sm font-medium text-gray-700 dark:text-github-fg-default mb-2">
                    Pronouns
                  </label>
                  <input
                    type="text"
                    id="pronouns"
                    name="pronouns"
                    class="w-full px-4 py-3 rounded-lg border border-gray-300 dark:border-github-border-default bg-white dark:bg-github-canvas-default text-gray-900 dark:text-github-fg-default focus:ring-2 focus:ring-github-accent-emphasis focus:border-transparent"
                    placeholder="they/them, she/her, he/him, etc."
                  />
                </div>

                <!-- Bio -->
                <div>
                  <label for="bio" class="block text-sm font-medium text-gray-700 dark:text-github-fg-default mb-2">
                    Bio
                  </label>
                  <textarea
                    id="bio"
                    name="bio"
                    rows="6"
                    required
                    class="w-full px-4 py-3 rounded-lg border border-gray-300 dark:border-github-border-default bg-white dark:bg-github-canvas-default text-gray-900 dark:text-github-fg-default focus:ring-2 focus:ring-github-accent-emphasis focus:border-transparent"
                    placeholder="Tell us about yourself..."
                  ></textarea>
                </div>

                <!-- Website Links -->
                <div>
                  <label for="links" class="block text-sm font-medium text-gray-700 dark:text-github-fg-default mb-2">
                    Website Links
                  </label>
                  <textarea
                    id="links"
                    name="links"
                    rows="4"
                    class="w-full px-4 py-3 rounded-lg border border-gray-300 dark:border-github-border-default bg-white dark:bg-github-canvas-default text-gray-900 dark:text-github-fg-default focus:ring-2 focus:ring-github-accent-emphasis focus:border-transparent"
                    placeholder="https://github.com/yourusername&#10;https://yourwebsite.com&#10;One link per line"
                  ></textarea>
                  <p class="mt-2 text-sm text-gray-500 dark:text-github-fg-subtle">One link per line</p>
                </div>

                <!-- Custom Background (Supporter Only) -->
                <SupporterContent>
                  <div class="bg-github-accent-emphasis/10 border border-github-accent-emphasis/20 rounded-lg p-4 mb-4">
                    <div class="flex items-center gap-2 mb-2">
                      <svg class="w-5 h-5 text-github-accent-emphasis" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M11.3 1.046A1 1 0 0112 2v5h4a1 1 0 01.82 1.573l-7 10A1 1 0 018 18v-5H4a1 1 0 01-.82-1.573l7-10a1 1 0 011.12-.38z" clip-rule="evenodd"></path>
                      </svg>
                      <h3 class="text-lg font-semibold text-github-accent-emphasis">Custom Background</h3>
                    </div>
                    <p class="text-sm text-github-fg-muted mb-4">Customize your profile background with CSS gradients!</p>
                    
                    <div>
                      <label for="custom_background" class="block text-sm font-medium text-github-fg-default mb-2">
                        Custom Background CSS
                      </label>
                      <textarea
                        id="custom_background"
                        name="custom_background"
                        rows="3"
                        class="w-full px-4 py-3 rounded-lg border border-github-border-default bg-github-canvas-default text-github-fg-default focus:ring-2 focus:ring-github-accent-emphasis focus:border-transparent font-mono text-sm"
                        placeholder="linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
                      ></textarea>
                      <p class="mt-2 text-sm text-github-fg-subtle">
                        Enter CSS background property. Examples:<br>
                        • <code class="bg-github-canvas-subtle px-1 rounded">linear-gradient(45deg, #ff6b6b, #4ecdc4)</code><br>
                        • <code class="bg-github-canvas-subtle px-1 rounded">radial-gradient(circle, #ff9a9e, #fecfef)</code>
                      </p>
                    </div>
                  </div>
                </SupporterContent>

                <!-- Save Button -->
                <div class="flex gap-4">
                  <button
                    type="submit"
                    class="flex-1 bg-github-success-emphasis hover:bg-github-success-fg text-white font-semibold py-3 px-6 rounded-lg transition-colors"
                  >
                    Save Bio
                  </button>
                  <button
                    type="button"
                    id="previewBtn"
                    class="bg-github-accent-emphasis hover:bg-github-accent-fg text-white font-semibold py-3 px-6 rounded-lg transition-colors"
                  >
                    Preview
                  </button>
                </div>
              </form>
            </div>
          </div>

          <!-- Sidebar -->
          <div class="space-y-6">
            
            <!-- Profile Info -->
            <div class="bg-white dark:bg-github-canvas-overlay rounded-2xl shadow-xl p-6 border border-gray-200 dark:border-github-border-default">
              <h3 class="text-lg font-semibold text-gray-900 dark:text-github-fg-default mb-4">Profile Info</h3>
              <div id="userInfo" class="space-y-4">
                <!-- Will be populated by JavaScript -->
              </div>
            </div>

            <!-- Quick Actions -->
            <div class="bg-white dark:bg-github-canvas-overlay rounded-2xl shadow-xl p-6 border border-gray-200 dark:border-github-border-default">
              <h3 class="text-lg font-semibold text-gray-900 dark:text-github-fg-default mb-4">Quick Actions</h3>
              <div class="space-y-3">
                <button
                  id="viewProfileBtn"
                  class="block w-full text-center py-2 px-4 rounded-lg bg-github-accent-emphasis hover:bg-github-accent-fg text-white transition-colors"
                >
                  View Public Profile
                </button>
                <button
                  id="copyLinkBtn"
                  class="block w-full text-center py-2 px-4 rounded-lg border border-github-border-default text-gray-700 dark:text-github-fg-default hover:bg-gray-50 dark:hover:bg-github-canvas-subtle transition-colors"
                >
                  Copy Profile Link
                </button>
              </div>
            </div>

            <!-- Stats -->
            <div class="bg-white dark:bg-github-canvas-overlay rounded-2xl shadow-xl p-6 border border-gray-200 dark:border-github-border-default">
              <h3 class="text-lg font-semibold text-gray-900 dark:text-github-fg-default mb-4">Stats</h3>
              <div class="space-y-2">
                <div class="flex justify-between">
                  <span class="text-gray-600 dark:text-github-fg-muted">Profile Views</span>
                  <span class="font-semibold text-gray-900 dark:text-github-fg-default">--</span>
                </div>
                <div class="flex justify-between">
                  <span class="text-gray-600 dark:text-github-fg-muted">Last Updated</span>
                  <span class="font-semibold text-gray-900 dark:text-github-fg-default" id="lastUpdated">--</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <script>
      // Convex integration
      async function callConvexMutation(functionName, args = {}) {
        const CONVEX_URL = import.meta.env.PUBLIC_CONVEX_URL;
        
        if (!CONVEX_URL) {
          throw new Error('PUBLIC_CONVEX_URL environment variable is not set');
        }
        
        try {
          console.log('📡 Making Convex API call:', {
            url: `${CONVEX_URL}/api/mutation`,
            functionName,
            args
          });
          
          const response = await fetch(`${CONVEX_URL}/api/mutation`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              path: functionName,
              args,
            }),
          });

          console.log('📨 Response status:', response.status);
          console.log('📨 Response ok:', response.ok);

          if (!response.ok) {
            const errorText = await response.text();
            console.error('❌ HTTP Error Response:', errorText);
            throw new Error(`HTTP error! status: ${response.status}, body: ${errorText}`);
          }

          const result = await response.json();
          console.log('📦 Full API response:', result);
          return result.value;
        } catch (error) {
          console.error('❌ Error calling Convex mutation:', error);
          throw error;
        }
      }

      async function callConvexQuery(functionName, args = {}) {
        const CONVEX_URL = import.meta.env.PUBLIC_CONVEX_URL;
        
        if (!CONVEX_URL) {
          throw new Error('PUBLIC_CONVEX_URL environment variable is not set');
        }
        
        try {
          const response = await fetch(`${CONVEX_URL}/api/query`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              path: functionName,
              args,
            }),
          });

          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }

          const result = await response.json();
          return result.value;
        } catch (error) {
          console.error('Error calling Convex query:', error);
          throw error;
        }
      }

      // Wait for Clerk to load (it's automatically initialized by @clerk/astro)
      const waitForClerk = (): Promise<any> => {
        return new Promise((resolve) => {
          if (window.Clerk && window.Clerk.user) {
            resolve(window.Clerk);
          } else {
            setTimeout(() => resolve(waitForClerk()), 100);
          }
        });
      };

      // Get user info and populate sidebar
      const clerk = await waitForClerk();
      const user = clerk.user;
      if (user) {
        const userInfoDiv = document.getElementById('userInfo');
        userInfoDiv.innerHTML = `
          <div class="flex items-center space-x-3">
            <img src="${user.imageUrl}" alt="Profile" class="w-12 h-12 rounded-full">
            <div>
              <p class="font-semibold text-gray-900 dark:text-github-fg-default">${user.fullName || user.username}</p>
              <p class="text-sm text-gray-600 dark:text-github-fg-muted">@${user.username}</p>
            </div>
          </div>
          <div class="pt-3 border-t border-gray-200 dark:border-github-border-default">
            <p class="text-sm text-gray-600 dark:text-github-fg-muted">
              Your bio URL: <br>
              <code class="text-xs bg-gray-100 dark:bg-github-canvas-default px-2 py-1 rounded">
                blahaj.bio/@${user.username}
              </code>
            </p>
          </div>
        `;

        // Load existing bio data
        loadBioData(user.username);
      }

      // Copy profile link functionality
      document.getElementById('copyLinkBtn').addEventListener('click', () => {
        if (user) {
          const profileUrl = `${window.location.origin}/@${user.username}`;
          navigator.clipboard.writeText(profileUrl).then(() => {
            // Show success feedback
            const btn = document.getElementById('copyLinkBtn');
            const originalText = btn.textContent;
            btn.textContent = 'Copied!';
            btn.classList.add('bg-github-success-emphasis', 'text-white');
            setTimeout(() => {
              btn.textContent = originalText;
              btn.classList.remove('bg-github-success-emphasis', 'text-white');
            }, 2000);
          });
        }
      });

      // Preview button
      document.getElementById('previewBtn').addEventListener('click', () => {
        if (user) {
          window.open(`/@${user.username}`, '_blank');
        }
      });

      // View Public Profile button
      document.getElementById('viewProfileBtn').addEventListener('click', () => {
        if (user) {
          window.location.href = `/@${user.username}`;
        }
      });

      // Form submission
      document.getElementById('bioForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        if (!user) return;

        const formData = new FormData(e.target);
        const bioData = {
          username: user.username,
          display_name: formData.get('display_name'),
          pronouns: formData.get('pronouns'),
          bio: formData.get('bio'),
          links: formData.get('links'),
          profile_image: user.imageUrl,
          full_name: user.fullName,
          custom_background: formData.get('custom_background')
        };

        try {
          console.log('Starting bio save process...');
          
          // Save to localStorage for immediate functionality
          localStorage.setItem(`bio_${user.username}`, JSON.stringify(bioData));
          console.log('✅ Saved to localStorage');
          
          // Also save to Convex database
          try {
            console.log('🚀 Attempting to save to Convex...');
            console.log('📦 Bio data being sent:', bioData);
            
            const result = await callConvexMutation('bios:saveBio', bioData);
            console.log('✅ Successfully saved to Convex database:', result);
            showNotification('Bio saved successfully to database!', 'success');
          } catch (convexError) {
            console.error('❌ Failed to save to Convex:', convexError);
            console.error('📦 Data that failed:', bioData);
            showNotification('Bio saved locally, but failed to sync to database', 'warning');
          }
          
          // Update last updated time
          document.getElementById('lastUpdated').textContent = 'Just now';
        } catch (error) {
          console.error('❌ Error saving bio:', error);
          showNotification('Error saving bio. Please try again.', 'error');
        }
      });

      // Load existing bio data
      async function loadBioData(username) {
        try {
          // First try localStorage for immediate loading
          const savedBio = localStorage.getItem(`bio_${username}`);
          if (savedBio) {
            const bioData = JSON.parse(savedBio);
            populateForm(bioData);
          }

          // Also try to load from Convex to sync any updates
          try {
            const convexBio = await callConvexQuery('bios:getBio', { username });
            if (convexBio) {
              populateForm(convexBio);
              // Update localStorage with latest from Convex
              localStorage.setItem(`bio_${username}`, JSON.stringify(convexBio));
            }
          } catch (convexError) {
            console.warn('Failed to load from Convex, using localStorage:', convexError);
          }
        } catch (error) {
          console.error('Error loading bio data:', error);
        }
      }

      function populateForm(bioData) {
        document.getElementById('display_name').value = bioData.display_name || '';
        document.getElementById('pronouns').value = bioData.pronouns || '';
        document.getElementById('bio').value = bioData.bio || '';
        document.getElementById('links').value = bioData.links || '';
        
        // Handle custom background for supporters (always show in development)
        const customBackgroundSection = document.getElementById('customBackgroundSection');
        const customBackgroundInput = document.getElementById('custom_background');
        
        // Always show custom background section in development
        customBackgroundSection.style.display = 'block';
        customBackgroundInput.value = bioData.custom_background || '';
        
        if (bioData.updated_at) {
          const lastUpdated = new Date(bioData.updated_at);
          document.getElementById('lastUpdated').textContent = lastUpdated.toLocaleDateString();
        }
      }

      // Notification system
      function showNotification(message, type) {
        const notification = document.createElement('div');
        let bgColor;
        if (type === 'success') {
          bgColor = 'bg-github-success-emphasis';
        } else if (type === 'warning') {
          bgColor = 'bg-yellow-600';
        } else {
          bgColor = 'bg-github-danger-emphasis';
        }
        
        notification.className = `fixed top-4 right-4 p-4 rounded-lg text-white z-50 transition-opacity ${bgColor}`;
        notification.textContent = message;
        document.body.appendChild(notification);
        
        setTimeout(() => {
          notification.style.opacity = '0';
          setTimeout(() => document.body.removeChild(notification), 300);
        }, 3000);
      }
    </script>
  </Protect>
</SiteLayout>
